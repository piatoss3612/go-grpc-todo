// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package todo

import (
	"context"
	"time"
)

const addTodo = `-- name: AddTodo :exec
INSERT INTO todos (id, content, priority) VALUES ($1, $2, $3)
`

type AddTodoParams struct {
	ID       string
	Content  string
	Priority int32
}

func (q *Queries) AddTodo(ctx context.Context, arg AddTodoParams) error {
	_, err := q.db.ExecContext(ctx, addTodo, arg.ID, arg.Content, arg.Priority)
	return err
}

const deleteTodo = `-- name: DeleteTodo :execrows
DELETE FROM todos WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteTodo, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteTodos = `-- name: DeleteTodos :execrows
DELETE FROM todos
`

func (q *Queries) DeleteTodos(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteTodos)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getTodo = `-- name: GetTodo :one
SELECT id, content, priority, is_done, created_at, updated_at FROM todos WHERE id = $1
`

func (q *Queries) GetTodo(ctx context.Context, id string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Priority,
		&i.IsDone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT id, content, priority, is_done, created_at, updated_at FROM todos
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Priority,
			&i.IsDone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :execrows
UPDATE todos SET content = $1, priority = $2, is_done = $3, updated_at = $4 WHERE id = $5
`

type UpdateTodoParams struct {
	Content   string
	Priority  int32
	IsDone    bool
	UpdatedAt time.Time
	ID        string
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateTodo,
		arg.Content,
		arg.Priority,
		arg.IsDone,
		arg.UpdatedAt,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
